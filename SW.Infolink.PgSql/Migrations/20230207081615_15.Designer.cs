// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SW.Infolink.PgSql;

#nullable disable

namespace SW.Infolink.PgSql.Migrations
{
    [DbContext(typeof(InfolinkDbContext))]
    [Migration("20230207081615_15")]
    partial class _15
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("infolink")
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SW.Infolink.Domain.Accounts.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean")
                        .HasColumnName("disabled");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<byte>("EmailProvider")
                        .HasColumnType("smallint")
                        .HasColumnName("email_provider");

                    b.Property<byte>("LoginMethods")
                        .HasColumnType("smallint")
                        .HasColumnName("login_methods");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_accounts_email");

                    b.ToTable("Accounts", "infolink");

                    b.HasData(
                        new
                        {
                            Id = 9999,
                            CreatedOn = new DateTime(2021, 12, 31, 22, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Disabled = false,
                            DisplayName = "Admin",
                            Email = "admin@infolink.systems",
                            EmailProvider = (byte)0,
                            LoginMethods = (byte)2,
                            Password = "$SWHASH$V1$10000$VQCi48eitH4Ml5juvBMOFZrMdQwBbhuIQVXe6RR7qJdDF2bJ"
                        });
                });

            modelBuilder.Entity("SW.Infolink.Domain.Accounts.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<byte>("LoginMethod")
                        .HasColumnType("smallint")
                        .HasColumnName("login_method");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_refresh_tokens_account_id");

                    b.ToTable("RefreshTokens", "infolink");
                });

            modelBuilder.Entity("SW.Infolink.Domain.Document", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<bool>("BusEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("bus_enabled");

                    b.Property<string>("BusMessageTypeName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("bus_message_type_name");

                    b.Property<bool?>("DisregardsUnfilteredMessages")
                        .HasColumnType("boolean")
                        .HasColumnName("disregards_unfiltered_messages");

                    b.Property<int>("DocumentFormat")
                        .HasColumnType("integer")
                        .HasColumnName("document_format");

                    b.Property<int>("DuplicateInterval")
                        .HasColumnType("integer")
                        .HasColumnName("duplicate_interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PromotedProperties")
                        .HasColumnType("jsonb")
                        .HasColumnName("promoted_properties");

                    b.HasKey("Id")
                        .HasName("pk_document");

                    b.HasIndex("BusMessageTypeName")
                        .IsUnique()
                        .HasDatabaseName("ix_document_bus_message_type_name");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_document_name");

                    b.ToTable("document", "infolink");

                    b.HasData(
                        new
                        {
                            Id = 10001,
                            BusEnabled = false,
                            DocumentFormat = 0,
                            DuplicateInterval = 0,
                            Name = "Aggregation Document",
                            PromotedProperties = "{}"
                        });
                });

            modelBuilder.Entity("SW.Infolink.Domain.DocumentTrail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("document_id");

                    b.Property<string>("StateAfter")
                        .HasColumnType("text")
                        .HasColumnName("state_after");

                    b.Property<string>("StateBefore")
                        .HasColumnType("text")
                        .HasColumnName("state_before");

                    b.HasKey("Id")
                        .HasName("pk_document_trail");

                    b.HasIndex("CreatedOn")
                        .HasDatabaseName("ix_document_trail_created_on");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_document_trail_document_id");

                    b.ToTable("document_trail", "infolink");
                });

            modelBuilder.Entity("SW.Infolink.Domain.Notifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HandlerId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("handler_id");

                    b.Property<string>("HandlerProperties")
                        .HasColumnType("text")
                        .HasColumnName("handler_properties");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean")
                        .HasColumnName("inactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<bool>("RunOnBadResult")
                        .HasColumnType("boolean")
                        .HasColumnName("run_on_bad_result");

                    b.Property<bool>("RunOnFailedResult")
                        .HasColumnType("boolean")
                        .HasColumnName("run_on_failed_result");

                    b.Property<int[]>("RunOnSubscriptions")
                        .HasColumnType("integer[]")
                        .HasColumnName("run_on_subscriptions");

                    b.Property<bool>("RunOnSuccessfulResult")
                        .HasColumnType("boolean")
                        .HasColumnName("run_on_successful_result");

                    b.HasKey("Id")
                        .HasName("pk_notifier");

                    b.ToTable("notifier", "infolink");
                });

            modelBuilder.Entity("SW.Infolink.Domain.OnHoldXchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BadData")
                        .HasColumnType("boolean")
                        .HasColumnName("bad_data");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string[]>("References")
                        .HasColumnType("text[]")
                        .HasColumnName("references");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.HasKey("Id")
                        .HasName("pk_on_hold_xchange");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("ix_on_hold_xchange_subscription_id");

                    b.ToTable("on_hold_xchange", "infolink");
                });

            modelBuilder.Entity("SW.Infolink.Domain.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_partner");

                    b.ToTable("partner", "infolink");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SYSTEM"
                        });
                });

            modelBuilder.Entity("SW.Infolink.Domain.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AggregateOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("aggregate_on");

                    b.Property<int?>("AggregationForId")
                        .HasColumnType("integer")
                        .HasColumnName("aggregation_for_id");

                    b.Property<byte>("AggregationTarget")
                        .HasColumnType("smallint")
                        .HasColumnName("aggregation_target");

                    b.Property<int>("ConsecutiveFailures")
                        .HasColumnType("integer")
                        .HasColumnName("consecutive_failures");

                    b.Property<IReadOnlyDictionary<string, string>>("DocumentFilter")
                        .HasColumnType("jsonb")
                        .HasColumnName("document_filter");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("document_id");

                    b.Property<string>("HandlerId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("handler_id");

                    b.Property<IReadOnlyDictionary<string, string>>("HandlerProperties")
                        .HasColumnType("jsonb")
                        .HasColumnName("handler_properties");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean")
                        .HasColumnName("inactive");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("boolean")
                        .HasColumnName("is_running");

                    b.Property<string>("LastException")
                        .HasColumnType("text")
                        .HasColumnName("last_exception");

                    b.Property<string>("MapperId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("mapper_id");

                    b.Property<IReadOnlyDictionary<string, string>>("MapperProperties")
                        .HasColumnType("jsonb")
                        .HasColumnName("mapper_properties");

                    b.Property<string>("MatchExpression")
                        .HasColumnType("text")
                        .HasColumnName("match_expression");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("integer")
                        .HasColumnName("partner_id");

                    b.Property<DateTime?>("PausedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paused_on");

                    b.Property<DateTime?>("ReceiveOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("receive_on");

                    b.Property<string>("ReceiverId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("receiver_id");

                    b.Property<IReadOnlyDictionary<string, string>>("ReceiverProperties")
                        .HasColumnType("jsonb")
                        .HasColumnName("receiver_properties");

                    b.Property<string>("ResponseMessageTypeName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("response_message_type_name");

                    b.Property<int?>("ResponseSubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("response_subscription_id");

                    b.Property<bool>("Temporary")
                        .HasColumnType("boolean")
                        .HasColumnName("temporary");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<string>("ValidatorId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("validator_id");

                    b.Property<IReadOnlyDictionary<string, string>>("ValidatorProperties")
                        .HasColumnType("jsonb")
                        .HasColumnName("validator_properties");

                    b.HasKey("Id")
                        .HasName("pk_subscription");

                    b.HasIndex("AggregationForId")
                        .HasDatabaseName("ix_subscription_aggregation_for_id");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_subscription_document_id");

                    b.HasIndex("PartnerId")
                        .HasDatabaseName("ix_subscription_partner_id");

                    b.HasIndex("ResponseSubscriptionId")
                        .HasDatabaseName("ix_subscription_response_subscription_id");

                    b.ToTable("subscription", "infolink");
                });

            modelBuilder.Entity("SW.Infolink.Domain.SubscriptionTrail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("StateAfter")
                        .HasColumnType("text")
                        .HasColumnName("state_after");

                    b.Property<string>("StateBefore")
                        .HasColumnType("text")
                        .HasColumnName("state_before");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.HasKey("Id")
                        .HasName("pk_subscription_trail");

                    b.HasIndex("CreatedOn")
                        .HasDatabaseName("ix_subscription_trail_created_on");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("ix_subscription_trail_subscription_id");

                    b.ToTable("subscription_trail", "infolink");
                });

            modelBuilder.Entity("SW.Infolink.Domain.Xchange", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<string>("CorrelationId")
                        .HasColumnType("text")
                        .HasColumnName("correlation_id");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("document_id");

                    b.Property<string>("HandlerId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("handler_id");

                    b.Property<IReadOnlyDictionary<string, string>>("HandlerProperties")
                        .HasColumnType("jsonb")
                        .HasColumnName("handler_properties");

                    b.Property<string>("InputContentType")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("input_content_type");

                    b.Property<string>("InputHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("input_hash");

                    b.Property<string>("InputName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("input_name");

                    b.Property<int>("InputSize")
                        .HasColumnType("integer")
                        .HasColumnName("input_size");

                    b.Property<string>("MapperId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("mapper_id");

                    b.Property<IReadOnlyDictionary<string, string>>("MapperProperties")
                        .HasColumnType("jsonb")
                        .HasColumnName("mapper_properties");

                    b.Property<string[]>("References")
                        .HasColumnType("text[]")
                        .HasColumnName("references");

                    b.Property<string>("ResponseMessageTypeName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("response_message_type_name");

                    b.Property<int?>("ResponseSubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("response_subscription_id");

                    b.Property<string>("RetryFor")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("retry_for");

                    b.Property<DateTime>("StartedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_on");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.HasKey("Id")
                        .HasName("pk_xchange");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_xchange_document_id");

                    b.HasIndex("InputHash")
                        .HasDatabaseName("ix_xchange_input_hash");

                    b.HasIndex("RetryFor")
                        .HasDatabaseName("ix_xchange_retry_for");

                    b.HasIndex("StartedOn")
                        .HasDatabaseName("ix_xchange_started_on");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("ix_xchange_subscription_id");

                    b.ToTable("xchange", "infolink");
                });

            modelBuilder.Entity("SW.Infolink.Domain.XchangeAggregation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<DateTime>("AggregatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("aggregated_on");

                    b.Property<string>("AggregationXchangeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("aggregation_xchange_id");

                    b.HasKey("Id")
                        .HasName("pk_xchange_aggregation");

                    b.HasIndex("AggregationXchangeId")
                        .HasDatabaseName("ix_xchange_aggregation_aggregation_xchange_id");

                    b.ToTable("xchange_aggregation", "infolink");
                });

            modelBuilder.Entity("SW.Infolink.Domain.XchangeDelivery", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DeliveredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered_on");

                    b.HasKey("Id")
                        .HasName("pk_xchange_delivery");

                    b.HasIndex("DeliveredOn")
                        .HasDatabaseName("ix_xchange_delivery_delivered_on");

                    b.ToTable("xchange_delivery", "infolink");
                });

            modelBuilder.Entity("SW.Infolink.Domain.XchangeNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Exception")
                        .HasColumnType("text")
                        .HasColumnName("exception");

                    b.Property<DateTime>("FinishedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_on");

                    b.Property<int>("NotifierId")
                        .HasColumnType("integer")
                        .HasColumnName("notifier_id");

                    b.Property<string>("NotifierName")
                        .HasColumnType("text")
                        .HasColumnName("notifier_name");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean")
                        .HasColumnName("success");

                    b.Property<string>("XchangeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("xchange_id");

                    b.HasKey("Id")
                        .HasName("pk_xchange_notification");

                    b.ToTable("xchange_notification", "infolink");
                });

            modelBuilder.Entity("SW.Infolink.Domain.XchangePromotedProperties", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<int[]>("Hits")
                        .HasColumnType("integer[]")
                        .HasColumnName("hits");

                    b.Property<IReadOnlyDictionary<string, string>>("Properties")
                        .HasColumnType("jsonb")
                        .HasColumnName("properties");

                    b.Property<string>("PropertiesRaw")
                        .HasColumnType("text")
                        .HasColumnName("properties_raw");

                    b.HasKey("Id")
                        .HasName("pk_xchange_promoted_properties");

                    b.HasIndex("PropertiesRaw")
                        .HasDatabaseName("ix_xchange_promoted_properties_properties_raw");

                    b.ToTable("xchange_promoted_properties", "infolink");
                });

            modelBuilder.Entity("SW.Infolink.Domain.XchangeResult", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<string>("Exception")
                        .HasColumnType("text")
                        .HasColumnName("exception");

                    b.Property<DateTime>("FinishedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_on");

                    b.Property<bool>("OutputBad")
                        .HasColumnType("boolean")
                        .HasColumnName("output_bad");

                    b.Property<string>("OutputContentType")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("output_content_type");

                    b.Property<string>("OutputHash")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("output_hash");

                    b.Property<string>("OutputName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("output_name");

                    b.Property<int>("OutputSize")
                        .HasColumnType("integer")
                        .HasColumnName("output_size");

                    b.Property<bool>("ResponseBad")
                        .HasColumnType("boolean")
                        .HasColumnName("response_bad");

                    b.Property<string>("ResponseContentType")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("response_content_type");

                    b.Property<string>("ResponseHash")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("response_hash");

                    b.Property<string>("ResponseName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("response_name");

                    b.Property<int>("ResponseSize")
                        .HasColumnType("integer")
                        .HasColumnName("response_size");

                    b.Property<string>("ResponseXchangeId")
                        .HasColumnType("text")
                        .HasColumnName("response_xchange_id");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean")
                        .HasColumnName("success");

                    b.HasKey("Id")
                        .HasName("pk_xchange_result");

                    b.ToTable("xchange_result", "infolink");
                });

            modelBuilder.Entity("SW.Infolink.RunFlagUpdater+RunningResult", b =>
                {
                    b.Property<bool>("IsRunning")
                        .HasColumnType("boolean")
                        .HasColumnName("is_running");

                    b.ToTable("running_result", "infolink");

                    b.ToView(null);
                });

            modelBuilder.Entity("SW.Infolink.Domain.Accounts.RefreshToken", b =>
                {
                    b.HasOne("SW.Infolink.Domain.Accounts.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_accounts_account_id");
                });

            modelBuilder.Entity("SW.Infolink.Domain.DocumentTrail", b =>
                {
                    b.HasOne("SW.Infolink.Domain.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_document_trail_document_document_id");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("SW.Infolink.Domain.Partner", b =>
                {
                    b.OwnsMany("SW.Infolink.Domain.ApiCredential", "ApiCredentials", b1 =>
                        {
                            b1.Property<int>("PartnerId")
                                .HasColumnType("integer")
                                .HasColumnName("partner_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("key");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("name");

                            b1.HasKey("PartnerId", "Id")
                                .HasName("pk_partner_api_credential");

                            b1.HasIndex("Key")
                                .IsUnique()
                                .HasDatabaseName("ix_partner_api_credential_key");

                            b1.ToTable("partner_api_credential", "infolink");

                            b1.WithOwner()
                                .HasForeignKey("PartnerId")
                                .HasConstraintName("fk_partner_api_credential_partner_partner_id");

                            b1.HasData(
                                new
                                {
                                    PartnerId = 1,
                                    Id = 1,
                                    Key = "7facc758283844b49cc4ffd26a75b1de",
                                    Name = "default"
                                });
                        });

                    b.Navigation("ApiCredentials");
                });

            modelBuilder.Entity("SW.Infolink.Domain.Subscription", b =>
                {
                    b.HasOne("SW.Infolink.Domain.Subscription", null)
                        .WithMany()
                        .HasForeignKey("AggregationForId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_subscription_aggregation_for");

                    b.HasOne("SW.Infolink.Domain.Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_document_document_id");

                    b.HasOne("SW.Infolink.Domain.Partner", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_subscription_partner_partner_id");

                    b.HasOne("SW.Infolink.Domain.Subscription", null)
                        .WithMany()
                        .HasForeignKey("ResponseSubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_subscription_response_subscriber");

                    b.OwnsMany("SW.Infolink.Domain.Schedule", "Schedules", b1 =>
                        {
                            b1.Property<int>("SubscriptionId")
                                .HasColumnType("integer")
                                .HasColumnName("subscription_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("Backwards")
                                .HasColumnType("boolean")
                                .HasColumnName("backwards");

                            b1.Property<long>("On")
                                .HasColumnType("bigint")
                                .HasColumnName("on");

                            b1.Property<byte>("Recurrence")
                                .HasColumnType("smallint")
                                .HasColumnName("recurrence");

                            b1.HasKey("SubscriptionId", "Id")
                                .HasName("pk_subscription_schedule");

                            b1.ToTable("subscription_schedule", "infolink");

                            b1.WithOwner()
                                .HasForeignKey("SubscriptionId")
                                .HasConstraintName("fk_subscription_schedule_subscription_subscription_id");
                        });

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("SW.Infolink.Domain.SubscriptionTrail", b =>
                {
                    b.HasOne("SW.Infolink.Domain.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_trail_subscription_subscription_id");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("SW.Infolink.Domain.Xchange", b =>
                {
                    b.HasOne("SW.Infolink.Domain.Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_xchange_document_document_id");
                });

            modelBuilder.Entity("SW.Infolink.Domain.XchangeAggregation", b =>
                {
                    b.HasOne("SW.Infolink.Domain.Xchange", null)
                        .WithOne()
                        .HasForeignKey("SW.Infolink.Domain.XchangeAggregation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_xchange_aggregation_xchange_xchange_id");
                });

            modelBuilder.Entity("SW.Infolink.Domain.XchangeDelivery", b =>
                {
                    b.HasOne("SW.Infolink.Domain.Xchange", null)
                        .WithOne()
                        .HasForeignKey("SW.Infolink.Domain.XchangeDelivery", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_xchange_delivery_xchange_xchange_id");
                });

            modelBuilder.Entity("SW.Infolink.Domain.XchangePromotedProperties", b =>
                {
                    b.HasOne("SW.Infolink.Domain.Xchange", null)
                        .WithOne()
                        .HasForeignKey("SW.Infolink.Domain.XchangePromotedProperties", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_xchange_promoted_properties_xchange_xchange_id");
                });

            modelBuilder.Entity("SW.Infolink.Domain.XchangeResult", b =>
                {
                    b.HasOne("SW.Infolink.Domain.Xchange", null)
                        .WithOne()
                        .HasForeignKey("SW.Infolink.Domain.XchangeResult", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_xchange_result_xchange_xchange_id");
                });

            modelBuilder.Entity("SW.Infolink.Domain.Partner", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
