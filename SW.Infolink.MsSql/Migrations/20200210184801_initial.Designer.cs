// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SW.Infolink;

namespace SW.Infolink.MsSql.Migrations
{
    [DbContext(typeof(InfolinkDbContext))]
    [Migration("20200210184801_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SW.Infolink.AccessKeySet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key1")
                        .IsRequired()
                        .HasColumnType("varchar(1024)")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<string>("Key2")
                        .IsRequired()
                        .HasColumnType("varchar(1024)")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("AccessKeySets","infolink");
                });

            modelBuilder.Entity("SW.Infolink.Adapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<byte[]>("Package")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timeout")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Adapters","infolink");
                });

            modelBuilder.Entity("SW.Infolink.Document", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("BusEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("BusMessageTypeName")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("DuplicateInterval")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PromotedProperties")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Documents","infolink");
                });

            modelBuilder.Entity("SW.Infolink.Receiver", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReceiveOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Receivers","infolink");
                });

            modelBuilder.Entity("SW.Infolink.Subscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Aggregate")
                        .HasColumnType("bit");

                    b.Property<string>("DocumentFilter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("HandlerId")
                        .HasColumnType("int");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<int>("KeySetId")
                        .HasColumnType("int");

                    b.Property<int>("MapperId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponseSubscriberId")
                        .HasColumnType("int");

                    b.Property<bool>("Temporary")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Subscribers","infolink");
                });

            modelBuilder.Entity("SW.Infolink.Xchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeliverOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveredOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("HandlerId")
                        .HasColumnType("int");

                    b.Property<string>("InputFileHash")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InputFileName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("InputFileSize")
                        .HasColumnType("int");

                    b.Property<int>("MapperId")
                        .HasColumnType("int");

                    b.Property<string>("References")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("ResponseXchangeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubscriberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliverOn");

                    b.HasIndex("DeliveredOn");

                    b.HasIndex("InputFileHash");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Xchanges","infolink");
                });

            modelBuilder.Entity("SW.Infolink.XchangeBlob", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id", "Type");

                    b.ToTable("XchangeFiles","infolink");
                });

            modelBuilder.Entity("SW.Infolink.Receiver", b =>
                {
                    b.OwnsMany("SW.Infolink.Schedule", "Schedules", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<bool>("Backwards")
                                .HasColumnType("bit");

                            b1.Property<TimeSpan>("On")
                                .HasColumnType("time");

                            b1.Property<int>("ReceiverId")
                                .HasColumnType("int");

                            b1.Property<byte>("Recurrence")
                                .HasColumnName("Recurrence")
                                .HasColumnType("tinyint");

                            b1.HasKey("Id");

                            b1.HasIndex("ReceiverId");

                            b1.ToTable("ReceiverSchedules","infolink");

                            b1.WithOwner()
                                .HasForeignKey("ReceiverId");
                        });
                });

            modelBuilder.Entity("SW.Infolink.Subscriber", b =>
                {
                    b.OwnsMany("SW.Infolink.Schedule", "Schedules", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<bool>("Backwards")
                                .HasColumnType("bit");

                            b1.Property<TimeSpan>("On")
                                .HasColumnType("time");

                            b1.Property<byte>("Recurrence")
                                .HasColumnName("Recurrence")
                                .HasColumnType("tinyint");

                            b1.Property<int>("SubscriberId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("SubscriberId");

                            b1.ToTable("SubscriberSchedules","infolink");

                            b1.WithOwner()
                                .HasForeignKey("SubscriberId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
