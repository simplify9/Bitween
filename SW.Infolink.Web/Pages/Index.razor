@page "/"
@inject NavigationManager navigationManager
@using Humanizer

<h3>Dashboard</h3>

<Search PageSize="20"
        SearchUrl="xchanges"
        TModel="XchangeRow"
        Width="max-content">

    <Commands>
        <a href="submit">New exchange</a>
    </Commands>

    <Columns>
        <Field Text="Xchange">
            <ColumnValue>
                <span class="badge badge-light">@(((XchangeRow)context.Model).DocumentName)</span>
                @if (((XchangeRow)context.Model).SubscriptionName != null)
                {
                    <span class="badge badge-light">@(((XchangeRow)context.Model).SubscriptionName)</span>
                }


            </ColumnValue>
        </Field>

        @*<Field Name="@nameof(XchangeRow.DeliveredOn)" Text="Dlv">
                <ColumnValue Context="fieldContext">
                    @(((XchangeRow)fieldContext.Model).DeliveredOn.Humanize())
                </ColumnValue>
            </Field>*@

        <Field Text="Status">
            <ColumnValue>
                @if (((XchangeRow)context.Model).Status == null)
                {
                    <span class="badge badge-warning">Running</span>
                    <span class="badge badge-secondary">
                        @(((XchangeRow)context.Model).StartedOn.Humanize())
                    </span>
                }
                else if (((XchangeRow)context.Model).Status.Value)
                {
                    <span class="badge badge-success">Ok</span>
                    @if (((XchangeRow)context.Model).AggregatedOn != null)
                    {
                        <span class="badge badge-success">Aggregated</span>
                    }
                    <span class="badge badge-secondary">
                        @(((XchangeRow)context.Model).StartedOn.Humanize())
                    </span> <span class="badge badge-secondary">@(((XchangeRow)context.Model).Duration)</span>
                }
                else
                {
                    <span class="badge badge-danger">Fail</span>
                    <span class="badge badge-secondary">
                        @(((XchangeRow)context.Model).StartedOn.Humanize())
                    </span>
                    <span class="badge badge-secondary">@(((XchangeRow)context.Model).Duration)</span>
                }

            </ColumnValue>
        </Field>



        <Field Text="Files">
            <ColumnValue>
                @if (((XchangeRow)context.Model).InputUrl != null)
                {
                    <a href="@(((XchangeRow)context.Model).InputUrl)" target="_blank" class="badge badge-info">Input</a>
                }
                @if (((XchangeRow)context.Model).OutputUrl != null)
                {
                    <a href="@(((XchangeRow)context.Model).OutputUrl)" target="_blank" class="badge badge-info">Output</a>
                }
                @if (((XchangeRow)context.Model).ResponseUrl != null)
                {
                    <a href="@(((XchangeRow)context.Model).ResponseUrl)" target="_blank" class="badge badge-info">Response</a>
                }

            </ColumnValue>
        </Field>
        <Field Text="References">
            <ColumnValue>
                <span class="badge badge-light">id:@(((XchangeRow)context.Model).Id)</span>
                @if (((XchangeRow)context.Model).PromotedProperties != null)
                {
                    foreach (var kvp in ((XchangeRow)context.Model).PromotedProperties)
                    {
                        <span class="badge badge-light">p:@kvp.Key:@kvp.Value</span>
                    }
                }
            </ColumnValue>
        </Field>
    </Columns>

</Search>

@code {

}
