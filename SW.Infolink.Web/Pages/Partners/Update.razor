@page "/partners/{Id:int}"
@inject InfolinkClient infolinkClient
@inject NotifyService notify


<UpdateForm Title="Partner" TModel="PartnerConfig" ApiUrl="partners" ReturnUrl="partners" Id="Id">

    <Field Name="@nameof(PartnerConfig.Name)" />
    <Subform Name="@nameof(PartnerConfig.ApiCredentials)" OnItem="OnApiCredItem">
        <Columns>
            <Field Text="Action">
                <ColumnHeader Context="fieldContext">
                    Action (<a href="JavaScript:void(0);" @onclick="@(() => fieldContext.Action.Invoke("add", null))">add</a>)
                </ColumnHeader>
                <ColumnValue Context="fieldContext">
                    <a href="JavaScript:void(0);" @onclick="@(() => fieldContext.Action.Invoke("remove", fieldContext.Model))">Remove</a>
                </ColumnValue>
            </Field>
            <Field Name="@nameof(KeyAndValue.Key)" />
            <Field Name="@nameof(KeyAndValue.Value)" />
        </Columns>
        <Form>
            <Field Name="@nameof(KeyAndValue.Key)" />
        </Form>
    </Subform>

    <Subform Name="@nameof(PartnerConfig.Subscriptions)">
        <Columns>
            <Field Name="@nameof(SubscriptionRow.Id)" />
            <Field Name="@nameof(SubscriptionRow.Name)" />
            <Field Name="@nameof(SubscriptionRow.Type)" />
        </Columns>
    </Subform>

</UpdateForm>

@code {

    [Parameter]
    public int Id { get; set; }

    async Task OnApiCredItem(TableItem tableItem)
    {
        if (tableItem.Flag == TableItemFlag.Added)
        {
            var apiResult = await infolinkClient.GeneratePartnerApiKey();
            await notify.NotifyOnApiResult(apiResult);
            if (apiResult.Success)
            {
                ((KeyAndValue)tableItem.Item).Value = apiResult.Response;
            }
        }

    }

}
